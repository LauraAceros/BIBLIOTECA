//Clase main 
import java.util.Scanner;
import java.util.ArrayList;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class Main {

    public static void main(String[] args) {
        Scanner consola = new Scanner(System.in);
        ArrayList<String> HistorialPrestamo = new ArrayList<String>();
        
        Biblioteca miBiblioteca = new Biblioteca(5, 5);

        System.out.println("Instrucciones: digitar el numero de la opcion que desea realizar en numeros NO en letras");
            System.out.println("Seguir esta misma logica cada que se le pida digitar un numero este no debera de ser en letras");
            System.out.println();
        int op;

       
        do {
            System.out.println();
            System.out.println("Menú de opciones");
            System.out.println("1 Ingresar un libro");
            System.out.println("2 Prestar un libro");
            System.out.println("3 Recibir de regreso un libro");
            System.out.println("4 Mostrar todos los libros");
            System.out.println("5 Mostrar historial de prestamos");
            System.out.println("6 Salir del programa");
            System.out.println("Ingrese una opción:");

            
            op = consola.nextInt();

            
            switch (op) {
                case 1:
                    
                    ingresarLibro(miBiblioteca, consola);
                    break;
                case 2:
                   
                    miBiblioteca.mostrarLibros();
                    prestarLibro(miBiblioteca, HistorialPrestamo, consola);
                    break;
                case 3:
                   
                    System.out.println();
                    miBiblioteca.mostrarLibros();
                    recibirDeRegreso(miBiblioteca, consola);
                    break;
                case 4:
                    System.out.println();
                    miBiblioteca.mostrarLibros();
                    break;
                case 5:

                    LocalDate currentDate = LocalDate.now();
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    System.out.println();
                    System.out.println("Historial de prestamos:");     
                    for (int i = 0; i < HistorialPrestamo.size(); i++) {
                    int a = i + 1;
                    System.out.println( a + "." + HistorialPrestamo.get(i)  + "\nfecha del prestamo " + currentDate.format(formatter) + "\nfecha de devolucion " + currentDate.plusDays(7).format(formatter));
    
    }
                    break;
                case 6:
                    System.out.println("Saliendo del programa...");
                    break;
                default:
                    System.out.println("Opción inválida");
                    break;
            }
        } while (op != 6);
    }

    private static void ingresarLibro(Biblioteca biblioteca, Scanner consola) {
        consola.nextLine();
        System.out.println();
        System.out.println("Ingrese el título del libro:");
        String titulo = consola.nextLine();
        System.out.println("Ingrese el nombre del autor:");
        String autor = consola.nextLine();
        System.out.println("Ingrese la cantidad de copias (digitar un numero, no letras):");
        int cantidadCopias = consola.nextInt();

        Libro libro = new Libro(titulo, autor, cantidadCopias);
        biblioteca.agregarLibro(libro, cantidadCopias);
    }

    private static void prestarLibro(Biblioteca biblioteca, ArrayList<String> HistorialPrestamo,  Scanner consola) {
        consola.nextLine();
        System.out.println();
        System.out.println("Libros disponibles para préstamo:");
        biblioteca.mostrarLibros();

        System.out.println("Escriba el número del libro que desea prestar y presione Enter.");
        System.out.println("Si no desea prestar, presione 0 y Enter.");

        int opcion = consola.nextInt();

        if (opcion >= 1 && opcion <= biblioteca.obtenerCantidadLibros()) {
            Libro libroSeleccionado = biblioteca.obtenerLibro(opcion);
            if (libroSeleccionado.getCantidadCopias() > 0) {
                libroSeleccionado.prestar();
                System.out.println("Se prestó una copia del libro " + libroSeleccionado.getTitulo());
                HistorialPrestamo.add(libroSeleccionado.getTitulo());
            } else {
                System.out.println("El libro " + libroSeleccionado.getTitulo() + " no tiene copias disponibles en la biblioteca.");
            }
        } else if (opcion != 0) {
            System.out.println("Opción inválida");
        }
    }

    private static void recibirDeRegreso(Biblioteca biblioteca, Scanner consola) {
        System.out.println();
        System.out.println("Ingrese el número del libro que desea devolver:");
        int numero = consola.nextInt();

        if (numero >= 1 && numero <= biblioteca.obtenerCantidadLibros()) {
            Libro libroSeleccionado = biblioteca.obtenerLibro(numero);
            libroSeleccionado.recibirDeRegreso(); 
            
            System.out.println("Libro devuelto exitosamente");
        } else {
            System.out.println("Número de libro inválido");
        }
    }
}

//Clase Libro 
public class Libro {
    private String titulo;
    private String autor;
    private int cantidadCopias;
    private int cantidadCopiasPrestadas;

    public Libro(String titulo, String autor, int cantidadCopias) {
        this.titulo = titulo;
        this.autor = autor;
        this.cantidadCopias = cantidadCopias;
        this.cantidadCopiasPrestadas = 0;
    }

    public String getTitulo() {
        return titulo;
    }

    public String getAutor() {
        return autor;
    }

    public int getCantidadCopias() {
        return cantidadCopias;
    }

    public void setCantidadCopias(int cantidadCopias) {
        this.cantidadCopias = cantidadCopias;
    }

    public int getCantidadCopiasPrestadas() {
        return cantidadCopiasPrestadas;
    }

    public void prestar() {
        cantidadCopias--;
        cantidadCopiasPrestadas++;
    }

    public void recibirDeRegreso() {
        cantidadCopias++;
        cantidadCopiasPrestadas--;
    }

    // Add public access modifier
    public void incrementarCopias() {
        this.cantidadCopias++; // Incremento de la cantidad de copias
    }
}

//Clase Biblioteca 

public class Biblioteca {
  private Libro[][] estanterias; 

// Constructor de la clase Biblioteca
public Biblioteca(int filas, int columnas) {
this.estanterias = new Libro[filas][columnas]; 
}


public void agregarLibro(Libro libro, int cantidadCopias) {
boolean libroAgregado = false; 

for (int i = 0; i < estanterias.length && !libroAgregado; i++) {
for (int j = 0; j < estanterias[i].length && !libroAgregado; j++) {

if (estanterias[i][j] != null && estanterias[i][j].getTitulo().equalsIgnoreCase(libro.getTitulo())) {
estanterias[i][j].incrementarCopias(); 
libroAgregado = true; 
System.out.println("La información del libro ha sido actualizada");
}
}
}

        
        if (!libroAgregado) {
            for (int i = 0; i < estanterias.length; i++) {
                for (int j = 0; j < estanterias[i].length; j++) {
                    if (estanterias[i][j] == null) {
                        estanterias[i][j] = libro; 
                        libroAgregado = true; 
                        System.out.println("Libro agregado correctamente");
                        break;
                    }
                }
                if (libroAgregado) {
                    break;
                }
            }
        }

        
        if (!libroAgregado) {
            System.out.println("Biblioteca llena");
        }
    }

  
    public void mostrarLibros() {
        System.out.println("Libros en la biblioteca:");
        int contador = 1; 
        for (Libro[] fila : estanterias) {
            for (Libro libro : fila) {
                if (libro != null) {
                    
                    System.out.println(contador + " " + libro.getTitulo() + " (" + libro.getCantidadCopias() + ")");
                    contador++; 
                }
            }
        }
    }

    
    public int obtenerCantidadLibros() {
        int cantidad = 0; 
        for (Libro[] fila : estanterias) {
            for (Libro libro : fila) {
                if (libro != null) {
                    cantidad++; 
                }
            }
        }
        return cantidad; 
    }

   
    public Libro obtenerLibro(int numero) {
        int contador = 0; 
        for (Libro[] fila : estanterias) {
            for (Libro libro : fila) {
                if (libro != null) {
                    contador++; 
                    if (contador == numero) {
                        return libro; 
                    }
                }
            }
        }
        return null; // Devuelve null si no se encuentra el libro con el número especificado
    }
    public Historial getHistorial() {
        return new Historial(10);
    }
    }


